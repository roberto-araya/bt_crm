<?php

/**
 * @file
 * Module file for bt_crm.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\Element;
use Drupal\path_alias\Entity\PathAlias;

/**
 * Implements hook_theme().
 */
function bt_crm_theme() {
  return [
    'bt_opportunity' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for opportunity templates.
 *
 * Default template: bt-opportunity.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the opportunity
 *     information and any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_bt_opportunity(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function bt_crm_entity_type_alter(array &$entity_types) {
  if (array_key_exists('redhen_contact', $entity_types)) {
    $entity_types['redhen_contact']->setFormClass('delete', 'Drupal\bt_crm\Form\ContactsDeleteForm');
    $entity_types['redhen_contact']->setHandlerClass('views_data', 'Drupal\bt_crm\ContactViewsData');
    $entity_types['redhen_contact']->setLinkTemplate('convert-to-client', "/app/contacts/persons/{redhen_contact}/convert-to-client");
  }
  if (array_key_exists('redhen_org', $entity_types)) {
    $entity_types['redhen_org']->setFormClass('delete', 'Drupal\bt_crm\Form\OrganizationsDeleteForm');
  }
  if (array_key_exists('redhen_contact_type', $entity_types)) {
    $entity_types['redhen_contact_type']->setHandlerClass('access', 'Drupal\bt_crm\RedhenContactTypeAccessControlHandler');
  }
  if (array_key_exists('redhen_org_type', $entity_types)) {
    $entity_types['redhen_org_type']->setHandlerClass('access', 'Drupal\bt_crm\RedhenOrgTypeAccessControlHandler');
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function bt_crm_redhen_org_insert(EntityInterface $entity) {
  // Convert to lowercase, trim spaces,
  // replace spaces with underscore and then truncate to 60 chars.
  $pathTitle = substr(str_replace(" ", "-", trim(strtolower($entity->label()))), 0, 60);

  $bundle = $entity->bundle();
  if ($bundle == 'bt_supplier' || $bundle == 'bt_company') {
    $bundle_name = [
      'bt_supplier' => [
        'en' => 'supplier',
        'es' => 'proveedor',
      ],
      'bt_company' => [
        'en' => 'company',
        'es' => 'empresa',
      ],
    ];

    $en_aliases = [
      "/app/contacts/organization/" . $entity->id() => "/app/contacts/organization/" . $bundle_name[$bundle]['en'] . "/" . $pathTitle,
      "/app/contacts/organization/" . $entity->id() . "/edit" => "/app/contacts/organization/" . $bundle_name[$bundle]['en'] . "/" . $entity->id() . "/edit",
      "/app/contacts/organization/" . $entity->id() . "/delete" => "/app/contacts/organization/" . $bundle_name[$bundle]['en'] . "/" . $entity->id() . "/delete",
    ];

    foreach ($en_aliases as $path => $alias) {
      $path_alias = PathAlias::create([
        'path' => $path,
        'alias' => $alias,
        'langcode' => 'en',
      ]);
      $path_alias->save();
    }

    $es_aliases = [
      "/app/contacts/organization/" . $entity->id() => "/app/contactos/organizacion/" . $bundle_name[$bundle]['es'] . "/" . $pathTitle,
      "/app/contacts/organization/" . $entity->id() . "/edit" => "/app/contactos/organizacion/" . $bundle_name[$bundle]['es'] . "/" . $entity->id() . "/editar",
      "/app/contacts/organization/" . $entity->id() . "/delete" => "/app/contactos/organizacion/" . $bundle_name[$bundle]['es'] . "/" . $entity->id() . "/eliminar",
    ];
    foreach ($es_aliases as $path => $alias) {
      $path_alias = PathAlias::create([
        'path' => $path,
        'alias' => $alias,
        'langcode' => 'es',
      ]);
      $path_alias->save();
    }
  }
  else {
    $en_aliases = [
      "/app/contacts/organization/" . $entity->id() => "/app/contacts/organization/" . $bundle . "/" . $pathTitle,
      "/app/contacts/organization/" . $entity->id() . "/edit" => "/app/contacts/organization/" . $bundle . "/" . $entity->id() . "/edit",
      "/app/contacts/organization/" . $entity->id() . "/delete" => "/app/contacts/organization/" . $bundle . "/" . $entity->id() . "/delete",
    ];

    foreach ($en_aliases as $path => $alias) {
      $path_alias = PathAlias::create([
        'path' => $path,
        'alias' => $alias,
        'langcode' => 'en',
      ]);
      $path_alias->save();
    }

    $es_aliases = [
      "/app/contacts/organization/" . $entity->id() => "/app/contactos/organizacion/" . $bundle . "/" . $pathTitle,
      "/app/contacts/organization/" . $entity->id() . "/edit" => "/app/contactos/organizacion/" . $bundle . "/" . $entity->id() . "/editar",
      "/app/contacts/organization/" . $entity->id() . "/delete" => "/app/contactos/organizacion/" . $bundle . "/" . $entity->id() . "/eliminar",
    ];
    foreach ($es_aliases as $path => $alias) {
      $path_alias = PathAlias::create([
        'path' => $path,
        'alias' => $alias,
        'langcode' => 'es',
      ]);
      $path_alias->save();
    }
  }
}

/**
 * Declares entity operations.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity on which the linked operations will be performed.
 *
 * @return array
 *   An operations array as returned by
 *   EntityListBuilderInterface::getOperations().
 *
 * @see \Drupal\Core\Entity\EntityListBuilderInterface::getOperations()
 */
function bt_crm_entity_operation(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'redhen_contact' && $entity->bundle() == 'bt_potential_client' && $entity->hasLinkTemplate('convert-to-client')) {
    return [
      'convert-to-client' => [
        'title' => t('Convert to client'),
        'weight' => -50,
        'url' => $entity->toUrl('convert-to-client'),
      ],
    ];
  }

  return [];
}
